A Physics-Based Non-Rigid Registration (PBNRR) method for Brain Shift

Contributors: Fotis Drakopoulos, Yixun Liu, Andriy Kot, 
Andrey Fedorov, Olivier Clatz, Nikos Chrisochoides 
Center for Real-Time Computing (crtc.wm.edu) &
Surgical Planning Lab, Brigham and Women's Hospital (http://www.spl.harvard.edu/),
Asclepios Research Laboratory at INRIA Sophia Antipolis, 
Old Dominion Univeristy and The College of William and Mary, Virginia, US.
Contact:  npchris@gmail.com

Project Page: TBA

Acknowledgements: This work is funded mainly by the ARRA funds for the
ITK-v4 implementation with grant number:NLMA2D2201000586P.In addition,
this work is supported in part by NSFgrants:CCF-1139864, CCF-1136538,
and CSI-1136536 and by the John Simon Guggenheim Foundation and the
Richard T.Cheng Endowment.
 
The Physics-Based Non-Rigid Registration (PBNRR) method is described in:

1. Robust Non-Rigid Registration to Capture Brain Shift from Intra-Operative MRI. 
Olivier Clatz, Herv√© Delingette, Ion-Florin Talos, Alexandra J. Golby, Ron Kikinis, Ferenc Jolesz, Nicholas Ayache, and Simon Warfield
IEEE Transactions on Medical Imaging, 24(11):1417-1427, Nov. 2005. 

2. An ITK implementation of a physics-based non-rigid registration method for brain deformation in image-guided neurosurgery.
Liu Y, Kot A, Drakopoulos F, Yao C, Fedorov A, Enquobahrie A, Clatz O and Chrisochoides NP (2014),
Frontiers in Neuroinformatics 8:33. doi: 10.3389/fninf.2014.00033

This project implements a Physics-Based Non-Rigid Registration (PBNRR) framework to compensate for the brain shift during 
Image-Guided Neurosurgery (IGNS). The method uses a linear homogeneous biomechanical model to compute a dense deformation field that defines a transformation for 
every point in the fixed image to the moving image. The PBNRR includes the following three components combine together to provide a user-friendly interface.
A. Feature Point Selection. It selects highly discriminant features (blocks of voxels) from the moving image. We use the variance of the image intensity within the block region to measure 
its relevance and only select a fraction of all potential blocks based on a predefined parameter of the algorithm.
B. Block Matching. The block matching algorithm searches the fixed image for the corresponding position of the selected voxels in the moving image, that maximizes a similarity measure.
C. Finite Element Solver. This component builds a Finite Element (FE) biomechanical model, applies the block matching displacements to the model, and estimates 
the mesh deformations iteratively by first using an approximation method. Once many of the outliers from block matching are rejected, we use an interpolation formulation to compute 
the image deformation field that maps positions from the fixed to the moving coordinate frame.


Supported Platforms 
Linux, Windows

Building PBNRR
This tool was built as a CLI (Command Line Interface) 3D Slicer module. 
The 3D Slicer tool needs to be downloaded, compiled and installed from source following the instructions here: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Developers/Build_Instructions.
A stand alone ITK version of the code is also available. For more information please contact Nikos Chrisochoides (npchris@gmail.com).


USAGE: 

   lib/Slicer-4.3/cli-modules/PBNRR  [--returnparameterfile <std::string>]
                                     [--processinformationaddress
                                     <std::string>] [--xml] [--echo]
                                     [--outputWarpedMesh <std::string>]
                                     [--outputInverseDeformationField
                                     <std::string>]
                                     [--outputDirectDeformationField
                                     <std::string>] [--outputImage
                                     <std::string>] [--mesh <std::string>]
                                     [--maskImage <std::string>]
                                     [--fixedImage <std::string>]
                                     [--movingImage <std::string>]
                                     [--poissonRatio <double>]
                                     [--youngModulus <double>]
                                     [--interpolationSteps <int>]
                                     [--outlierRejectionSteps <int>]
                                     [--rejectionFraction <double>]
                                     [--selectionFraction <double>]
                                     [--windowRadius <std::vector<int>>]
                                     [--blockRadius <std::vector<int>>]
                                     [--] [--version] [-h]


Where: 

   --returnparameterfile <std::string>
     Filename in which to write simple return parameters (int, float,
     int-vector, etc.) as opposed to bulk return parameters (image,
     geometry, transform, measurement, table).

   --processinformationaddress <std::string>
     Address of a structure to store process information (progress, abort,
     etc.). (default: 0)

   --xml
     Produce xml description of command line arguments (default: 0)

   --echo
     Echo the command line arguments (default: 0)

   --outputWarpedMesh <std::string>
     Warped tetrahedral mesh in vtk file format (optional).

   --outputInverseDeformationField <std::string>
     Transform calculated that aligns the fixed and moving image. Maps
     positions in the fixed coordinate frame to the moving coordinate frame
     (optional).

   --outputDirectDeformationField <std::string>
     Transform calculated that aligns the fixed and moving image. Maps
     positions in the moving coordinate frame to the fixed coordinate frame
     (optional).

   --outputImage <std::string>
     Moving image to the fixed image coordinate frame (optional).

   --mesh <std::string>
     Input tetrahedral mesh of the brain mask in vtk file format.

   --maskImage <std::string>
     Input brain mask of the moving image.

   --fixedImage <std::string>
     Input fixed image.

   --movingImage <std::string>
     Input moving image.

   --poissonRatio <double>
     Poisson Ratio of the linear biomechanical model. Value should be
     between [0.10,0.49]. (default: 0.45)

   --youngModulus <double>
     Young Modulus of the linear biomechanical model. (default: 0.0021)

   --interpolationSteps <int>
     Number of interpolation steps. Value should be between [1,20].
     (default: 5)

   --outlierRejectionSteps <int>
     Number of outlier rejection steps. Value should be between [1,20].
     (default: 5)

   --rejectionFraction <double>
     Fraction of the rejected blocks from the number of the selected image
     blocks. Value should be between [0.01,1). (default: 0.25)

   --selectionFraction <double>
     Fraction of the selected blocks from the total number of image blocks.
     Value should be between [0.01,1]. (default: 0.05)

   --windowRadius <std::vector<int>>
     Radius of the Block Matching window in each dimension (in image
     voxels). (default: 5,5,5)

   --blockRadius <std::vector<int>>
     Radius of the selected image blocks in each dimension (in image
     voxels). (default: 1,1,1)

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.

   
   

